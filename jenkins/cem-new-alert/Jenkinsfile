pipeline {
    agent any
    
    stages {
        stage('Get Event Type') {
            steps {
                echo "Event Type: $event_type"
            }
        }
        stage('Workspace connection error') {
            when {
                environment name: 'event_type', value: 'accountConnectionError' 
            }
            steps {
                slackSend (
                    color: "danger",
                    message: "üî• *" + event_payload_account_name + " on " + event_payload_platform_name + " connection error*\n"
                        + "      üè• " + event_payload_status + "\n"
                        + "      ü©∫ " + event_payload_status_reason + "\n"
                        + "      üíä Visit <https://cem.cyberark.com/platforms/"+event_payload_platform_name+"|CyberArk CEM> to fix it"
                )
            }
        }
        stage('Global Exposure increased') {
            when {
                environment name: 'event_type', value: 'globalExposureLevelExceeded' 
            }
            steps {
                slackSend (
                    color: "warning",
                    message: "üÜô *Global Exposure Increased*\n"
                        + "      üî∫ " +  event_payload_new_exposure_level 
                        + " (was: " +  event_payload_previous_exposure_level +")\n"
                        + "      üíä Visit <https://cem.cyberark.com/platforms/|CyberArk CEM> for more details"
                )
            }
            
        }
        stage('New shadow admin detected') {
            when {
                environment name: 'event_type', value: 'newShadowAdminDetected' 
            }
            steps {
                // TODO
                echo "TODO: New shadow admin detected"

            }
        }
        stage('New full admin detected') {
            when {
                environment name: 'event_type', value: 'newFullAdminDetected' 
            }
            steps {
                // TODO
                echo "TODO: New full admin detected"
            }
        }
        stage('Entities Exposure Level Increased') {
            when {
                environment name: 'event_type', value: 'entitiesExposureLevelIncreased' 
            }
            steps {
                // Get secrets from Conjur
                withCredentials([conjurSecretCredential(credentialsId: 'CEM_PASS', variable: 'CEM_PASS')]) {
                    script {
                        //Message Header
                        noOfEntitles = Integer.parseInt(sh (
                                script: " echo '" + env.event_payload + "' | jq .entities | jq length ",
                                returnStdout: true
                            ).trim())

                        blocks = [[
                                    "type": "section",
                                    "text": [
                                        "type": "mrkdwn",
                                        "text": ":chart_with_upwards_trend: CEM detected "+noOfEntitles+" entities' *exposure level increased*"
                                    ]
                                ]]
                        
                        blocks.add(
                           [
                                "type": "section",
                                "text": [
                                    "type": "mrkdwn",
                                    "text": "What do you want to do?"
                                ],
                                "accessory": [
                                    "type": "static_select",
                                    "placeholder": [
                                        "type": "plain_text",
                                        "text": "Select an item",
                                        "emoji": true
                                    ],
                                    "initial_option": [
                                        "text": [
                                            "type": "plain_text",
                                            "text": "Remove all shadow admin permission"
                                        ],
                                        "value": "LEAST_PRIVILEGE_REMOVE_SHADOW_PERMISSIONS"
                                    ],
                                    "options": [
                                        [
                                            "text": [
                                                "type": "plain_text",
                                                "text": "Remove all shadow admin permission"
                                            ],
                                            "value": "LEAST_PRIVILEGE_REMOVE_SHADOW_PERMISSIONS"
                                        ],
                                        [
                                            "text": [
                                                "type": "plain_text",
                                                "text": "Keep only shadow admin permission that are in use"
                                            ],
                                            "value": "LEAST_PRIVILEGE"
                                        ],
                                        [
                                            "text": [
                                                "type": "plain_text",
                                                "text": "Keep all shadow admin permissions"
                                            ],
                                            "value": "LEAST_PRIVILEGE_KEEP_ALL_SHADOW_PERMISSIONS"
                                        ]
                                    ],
                                    "action_id": "static_select-action"
                                ]
                            ]
                        )
              
                        optionsList = []
                        
                        // Individual Entity
                        for (int i=0; i<noOfEntitles; i++) {
                            entityId    = sh (returnStdout: true, script: "echo '" + env.event_payload + "'  | jq -r .entities["+i+"].entity_id ").trim()
                            entityName  = sh (returnStdout: true, script: "echo '" + env.event_payload + "'  | jq -r .entities["+i+"].entity_name ").trim()
                            newLevel    = sh (returnStdout: true, script: "echo '" + env.event_payload + "'  | jq -r .entities["+i+"].new_exposure_level ").trim()
                            oldLevel    = sh (returnStdout: true, script: "echo '" + env.event_payload + "'  | jq -r .entities["+i+"].previous_exposure_level ").trim()
                            platform    = env.event_payload_platform_name
                            accountId   = env.event_payload_account_id


                            // TODO: Add logics for Tags here
                            
                            // Add context to the message
                            
                            // Get CEM Logon Token
                            cemToken = sh (
                                script: "curl -s -X POST  -H \"Content-Type: application/json\" -d '{ \"organization\":\"cybr-ap-se-jpn\",\"accessKey\":\"${CEM_PASS}\"}'  https://api.cem.cyberark.com/apis/login  | jq -r .token ",
                                returnStdout: true
                            ).trim()
                            
                            //  Get Remediations
                            rawRemediations = sh (
                                script: "curl -s -X GET 'https://api.cem.cyberark.com/recommendations/remediations?platform="+platform+"&account_id="+accountId+"&entity_id="+entityId+"' --header 'Content-Type: application/json' --header \"Authorization: Bearer ${cemToken}\" | jq -c '.remediations | . []|=keys | . [] '",
                                returnStdout: true                            
                            ).trim()
                            //echo "Remediations: " + rawRemediations
                            remediationsList = rawRemediations.tokenize(',[]')
                            
                            
                            // Get Recommendations
                            rawRecommendations = sh (
                                script: "curl -s -X GET 'https://api.cem.cyberark.com/recommendations/api/metadata?platform="+platform+"&account_id="+accountId+"&entity_id="+entityId+"' --header 'Content-Type: application/json' --header \"Authorization: Bearer ${cemToken}\" | jq -c '.recommendations | .[] | select(.status==\"NEW\") | .active_recommendations'",
                                returnStdout: true                            
                            ).trim()
                            //echo "Recommendations: " + rawRecommendations
                            recommendationsList = rawRecommendations.tokenize(',[]')
                            
                            optionText = ""

                            
                            // Individual Recommendation
                            for (int j=0; j<recommendationsList.size(); j++) {
          
                                switch (recommendationsList[j].replaceAll("\"","") ) {
                                    case "REMOVE_USERS_FROM_GROUP": 
                                        recommendationText = "Remove users from group"
                                        break
                                    case "UN_USED_PERMISSIONS_IN_GROUP": 
                                        recommendationText = "Remove excessive permissions from group üîß"
                                        break
                                    case "UN_USED_PERMISSIONS":
                                        recommendationText = "Remove excessive permissions that have not been used in 90+ days üîß"
                                        break
                                    case "SHADOW_ADMIN_MFA":
                                        recommendationText = "Secure shadow admin with MFA"
                                        break
                                    case "SHADOW_ADMIN_PAS":
                                        recommendationText = "Secure shadow admin in PAS"
                                        break
                                    default:
                                        recommendationText = recommendationsList[j]
                                        break
                                }
                                if (j!=0) { optionText +="\n" }
                                optionText += (j+1) + ". " + recommendationText
                            }

                            optionsList.add([
                                    "text": [
                                    "type": "mrkdwn",
                                    "text": "‚òÅÔ∏è "+entityId + " üî∫ _" + newLevel + "_"
                                ],
                                "description": [
                                    "type": "mrkdwn",
                                    "text": optionText.take(150)
                                ],
                                "value": platform+"^^"+accountId+"^^"+ entityId 
                            ])
                        }

                        blocks.add(	[
                            "type": "section",
                            "text": [
                                "type": "mrkdwn",
                                "text": "_Recommendation details:_"
                            ],
                            "accessory": [
                                "type": "checkboxes",
                                "options": optionsList,
                                "action_id": "checkboxes-action"
                            ],
                        ])
                        
                        blocks.add(	[ 
                            "type": "context",
                                "elements": [
                                    [
                                        "type": "plain_text",
                                        "text": "Recommendations with :wrench: can be remediated by the buttons below",
                                        "emoji": true
                                    ]
                                ]
                            ])
                        
                        
                         
                        blocks.add(	[
                            "type": "actions",
                            "elements": [
                                [
                                    "type": "button",
                                    "text": [
                                        "type": "plain_text",
                                        "text": "Review Fixes for üîß",
                                        "emoji": true
                                    ],
                                    "value": "review fixes",
                                    "action_id": "view-fix"
                                ],
                                [
                                    "type": "button",
                                    "text": [
                                        "type": "plain_text",
                                        "text": "Apply Fix for üîß ",
                                        "emoji": true
                                    ],
                                    "style": "primary",
                                    "value": "Fix now",
                                    "action_id": "apply-fix"
                                ]
                            ]
                        ])
                        


                        // Send interactive message to Slack
                        slackSend (
                            color: "warning",
                            blocks: blocks,
                            text: "Entities' exposure level increased"
                        )
                    }
                }
            }
        }
    }
}
