pipeline {
    agent any
    
    stages {
        stage('Get Event Type') {
            steps {
                echo "Event Type: $event_type"
            }
        }
        stage('Workspace connection error') {
            when {
                environment name: 'event_type', value: 'accountConnectionError' 
            }
            steps {
                slackSend (
                    color: "danger",
                    message: "üî• *" + event_payload_account_name + " on " + event_payload_platform_name + " connection error*\n"
                        + "      üè• " + event_payload_status + "\n"
                        + "      ü©∫ " + event_payload_status_reason + "\n"
                        + "      üíä Visit <https://cem.cyberark.com/platforms/"+event_payload_platform_name+"|CyberArk CEM> to fix it"
                )
            }
        }
        stage('Global Exposure increased') {
            when {
                environment name: 'event_type', value: 'globalExposureLevelExceeded' 
            }
            steps {
                slackSend (
                    color: "warning",
                    message: "üÜô *Global Exposure Increased*\n"
                        + "      üî∫ " +  event_payload_new_exposure_level 
                        + " (was: " +  event_payload_previous_exposure_level +")\n"
                        + "      üíä Visit <https://cem.cyberark.com/platforms/|CyberArk CEM> for more details"
                )
            }
            
        }
        stage('New shadow admin detected') {
            when {
                environment name: 'event_type', value: 'newShadowAdminDetected' 
            }
            steps {
                // TODO
                echo "TODO: New shadow admin detected"

            }
        }
        stage('New full admin detected') {
            when {
                environment name: 'event_type', value: 'newFullAdminDetected' 
            }
            steps {
                // TODO
                echo "TODO: New full admin detected"
            }
        }
        stage('Entities Exposure Level Increased') {
            when {
                environment name: 'event_type', value: 'entitiesExposureLevelIncreased' 
            }
            steps {
                script {
                    def noOfEntitles = Integer.parseInt(sh (
                            script: " echo '" + env.event_payload + "' | jq .entities | jq length ",
                            returnStdout: true
                        ).trim())
                    
                    // Individual Entity
                    blocks=[]
                    for (int i=0; i<noOfEntitles; i++) {
                        blocks.add([[
                                    "type": "section",
                                    "text": [
                                        "type": "mrkdwn",
                                        "text": ":chart_with_upwards_trend: CEM detected "+noOfEntitles+" entities' *exposure level increased*"
                                    ]
                                ]]
                        
                        entityId    = sh (returnStdout: true, script: "echo '" + env.event_payload + "'  | jq -r .entities["+i+"].entity_id ").trim()
                        entityName  = sh (returnStdout: true, script: "echo '" + env.event_payload + "'  | jq -r .entities["+i+"].entity_name ").trim()
                        newLevel    = sh (returnStdout: true, script: "echo '" + env.event_payload + "'  | jq -r .entities["+i+"].new_exposure_level ").trim()
                        oldLevel    = sh (returnStdout: true, script: "echo '" + env.event_payload + "'  | jq -r .entities["+i+"].previous_exposure_level ").trim()
                    
                        blocks.add(["type": "divider"])  
                        blocks.add(["type": "section","text": ["type": "mrkdwn","text": ":cloud: Recommendations for *<https://cem.cyberark.com/cloud-entities/details?platform="+ env.event_payload_platform_name + "&accountId=" + env.event_payload_account_id + "&entityId=" + entityId + "|" + entityId + ">*"]])

                        elements = [
                                        [
                                            "type": "mrkdwn",
                                            "text": "*Current Exposure Level: "+ newLevel + "*"
                                        ],
                                        [
                                            "type": "mrkdwn",
                                            "text": "_Previous Exposure Level:_ " + oldLevel + ""
                                        ]
                                    ]
                        //theMsg += "*" + (i+1) + ") " + entityName + "*üî∫ "+ newLevel + " (was:" + oldLevel + ") "
                        
                        // TODO: Add logics for Tags here
                        
                        blocks.add(["type": "context","elements":elements])
                       
                    }
                    
                    // Send interactive message to Slack
                    slackSend (
                        color: "warning",
                        blocks: blocks
                    )
                }
            }
        }
    }
}
