pipeline {
    agent any
    
    stages {
        stage('Get Event Type') {
            steps {
                echo "Event Type: $event_type"
            }
        }
        stage('Workspace connection error') {
            when {
                environment name: 'event_type', value: 'accountConnectionError' 
            }
            steps {
                slackSend (
                    color: "danger",
                    message: "üî• *" + event_payload_account_name + " on " + event_payload_platform_name + " connection error*\n"
                        + "      üè• " + event_payload_status + "\n"
                        + "      ü©∫ " + event_payload_status_reason + "\n"
                        + "      üíä Visit <https://cem.cyberark.com/platforms/"+event_payload_platform_name+"|CyberArk CEM> to fix it"
                )
            }
        }
        stage('Global Exposure increased') {
            when {
                environment name: 'event_type', value: 'globalExposureLevelExceeded' 
            }
            steps {
                slackSend (
                    color: "warning",
                    message: "üÜô *Global Exposure Increased*\n"
                        + "      üî∫ " +  event_payload_new_exposure_level 
                        + " (was: " +  event_payload_previous_exposure_level +")\n"
                        + "      üíä Visit <https://cem.cyberark.com/platforms/|CyberArk CEM> for more details"
                )
            }
            
        }
        stage('New shadow admin detected') {
            when {
                environment name: 'event_type', value: 'newShadowAdminDetected' 
            }
            steps {
                // TODO
                echo "TODO: New shadow admin detected"

            }
        }
        stage('New full admin detected') {
            when {
                environment name: 'event_type', value: 'newFullAdminDetected' 
            }
            steps {
                // TODO
                echo "TODO: New full admin detected"
            }
        }
        stage('Entities Exposure Level Increased') {
            when {
                environment name: 'event_type', value: 'entitiesExposureLevelIncreased' 
            }
            steps {
                // Get secrets from Conjur
                withCredentials([conjurSecretCredential(credentialsId: 'Jenkins/cemPass', variable: 'CEM_PASS')]) {
                    script {
                        //Message Header
                        noOfEntitles = Integer.parseInt(sh (
                                script: " echo '" + env.event_payload + "' | jq .entities | jq length ",
                                returnStdout: true
                            ).trim())

                        blocks = [[
                                    "type": "section",
                                    "text": [
                                        "type": "mrkdwn",
                                        "text": ":chart_with_upwards_trend: CEM detected "+noOfEntitles+" entities' *exposure level increased*"
                                    ]
                                ]]
              
                        // Individual Entity
                        for (int i=0; i<noOfEntitles; i++) {
                            entityId    = sh (returnStdout: true, script: "echo '" + env.event_payload + "'  | jq -r .entities["+i+"].entity_id ").trim()
                            entityName  = sh (returnStdout: true, script: "echo '" + env.event_payload + "'  | jq -r .entities["+i+"].entity_name ").trim()
                            newLevel    = sh (returnStdout: true, script: "echo '" + env.event_payload + "'  | jq -r .entities["+i+"].new_exposure_level ").trim()
                            oldLevel    = sh (returnStdout: true, script: "echo '" + env.event_payload + "'  | jq -r .entities["+i+"].previous_exposure_level ").trim()
                            
                            blocks.add(["type": "divider"])  
                            blocks.add([
                                "type": "section",
                                "text": [
                                    "type": "mrkdwn",
                                    "text": ":cloud: Recommendations for *<https://cem.cyberark.com/cloud-entities/details?platform="+ env.event_payload_platform_name + "&accountId=" + env.event_payload_account_id + "&entityId=" + entityId + "|" + entityId + ">*"
                                ]])

                            elements = [[
                                        "type": "mrkdwn",
                                        "text": "*Current Exposure Level: "+ newLevel + "*"
                                      ],
                                      [
                                        "type": "mrkdwn",
                                        "text": "_Previous Exposure Level:_ " + oldLevel + ""
                                      ]]

                            // TODO: Add logics for Tags here
                            
                            // Get CEM Logon Token
                            cemToken = sh (
                                script: "curl -s -X POST  -H \"Content-Type: application/json\" -d '{ \"organization\":\"cybr-ap-se-jpn\",\"accessKey\":\"${CEM_PASS}\"}'  https://api.cem.cyberark.com/apis/login  | jq -r .token ",
                                returnStdout: true
                            ).trim()
                            
                            // TODO: Get Remediations
                            rawRemediations = sh (
                                script: "curl -s -X GET 'https://api.cem.cyberark.com/recommendations/remediations?platform="+platform+"&account_id="+accountId+"&entity_id="+entityId+"' --header 'Content-Type: application/json' --header \"Authorization: Bearer ${cemToken}\"",
                                returnStdout: true                            
                            ).trim()
                            echo "Remediations: " + rawRemediations
                            
                            // TODO: Get Recommendations
                            rawRecommendations = sh (
                                script: "curl -s -X GET 'https://api.cem.cyberark.com/recommendations/api/metadata?platform="+platform+"&account_id="+accountId+"&entity_id="+entityId+"' --header 'Content-Type: application/json' --header \"Authorization: Bearer ${cemToken}\"",
                                returnStdout: true                            
                            ).trim()
                            echo "Recommendations: " + rawRecommendations

                            
                            // Add context to the message
                            blocks.add(["type": "context","elements":elements])
                        }

                        // Send interactive message to Slack
                        slackSend (
                            color: "warning",
                            blocks: blocks
                        )
                    }
                }
            }
        }
    }
}
